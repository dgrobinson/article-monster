name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: |
        set -o pipefail
        npx --yes nyc --reporter=lcov npm test 2>&1 | tee test.log

    - name: Upload test log
      if: always() && matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: test-log
        path: test.log

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run lint
      run: |
        set -o pipefail
        npm run lint 2>&1 | tee lint.log

    - name: Upload lint log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-log
        path: lint.log

  store-ci-log:
    needs: [test, lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download test log
      uses: actions/download-artifact@v4
      with:
        name: test-log
        path: logs

    - name: Download lint log
      uses: actions/download-artifact@v4
      with:
        name: lint-log
        path: logs

    - name: Create combined CI log
      run: |
        mkdir -p ci_logs
        timestamp=$(date -u +"%Y%m%d_%H%M%S")
        logfile="ci_logs/${timestamp}_${GITHUB_SHA}.log"
        {
          echo '=== Test Log ==='
          cat logs/test.log
          echo
          echo '=== Lint Log ==='
          cat logs/lint.log
        } > "$logfile"
        echo "LOG_FILE=$logfile" >> $GITHUB_ENV

    - name: Commit CI log
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add "$LOG_FILE"
        git commit -m "ci: add log for ${GITHUB_SHA} [skip ci]" || echo "No changes to commit"
        git push
      if: always()

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name article-library-staging

    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i "s|image: article-library:latest|image: ${{ needs.build.outputs.image-tag }}|g" k8s/application.yaml
        
        # Apply configurations
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgresql.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/application.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/article-library-app -n article-library --timeout=300s

    - name: Run health check
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/article-library-app -n article-library
        
        # Get service URL and test health endpoint
        SERVICE_URL=$(kubectl get svc article-library-service -n article-library -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        if [ -n "$SERVICE_URL" ]; then
          curl -f http://$SERVICE_URL:8000/health || exit 1
        fi

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name article-library-cluster

    - name: Deploy to production
      run: |
        # Update image tag in deployment
        sed -i "s|image: article-library:latest|image: ${{ needs.build.outputs.image-tag }}|g" k8s/application.yaml
        
        # Apply configurations
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgresql.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/application.yaml
        
        # Rolling update strategy
        kubectl rollout status deployment/article-library-app -n article-library --timeout=600s

    - name: Run production health check
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/article-library-app -n article-library
        
        # Test health endpoint
        SERVICE_URL=$(kubectl get svc article-library-service -n article-library -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        if [ -n "$SERVICE_URL" ]; then
          curl -f http://$SERVICE_URL:8000/health || exit 1
        fi

    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Production deployment completed successfully!
          Version: ${{ github.event.release.tag_name }}
          Image: ${{ needs.build.outputs.image-tag }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  backup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name article-library-cluster

    - name: Run database backup
      run: |
        # Create backup job
        kubectl create job --from=cronjob/postgres-backup manual-backup-$(date +%Y%m%d-%H%M%S) -n article-library
        
        # Wait for backup to complete
        kubectl wait --for=condition=complete --timeout=1800s job/manual-backup-$(date +%Y%m%d-%H%M%S) -n article-library

    - name: Sync backups to S3
      run: |
        # This assumes you have a backup sync process set up
        aws s3 sync /backups s3://${{ secrets.BACKUP_S3_BUCKET }}/daily/ --delete

  notify:
    needs: [test, lint, build, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          CI/CD Pipeline failed!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()