const Epub = require('epub-gen');
const path = require('path');
const fs = require('fs').promises;
const axios = require('axios');

async function generateEpub(article) {
  try {
    console.log(`Generating EPUB for: "${article.title}"`);

    const filename = `${sanitizeFilename(article.title)}.epub`;
    const outputPath = path.join('/tmp', filename);
    
    // Process images and get the updated content with embedded images
    const { processedContent, imageAssets } = await processImagesForEpub(article.content);
    
    const options = {
      title: article.title,
      author: article.byline || 'Unknown Author',
      publisher: article.siteName || 'Robinsonian Article Monster',
      output: outputPath,
      cover: null, // We could add cover generation later
      tocTitle: false, // Disable table of contents
      disableToc: true, // Additional TOC disable
      css: `
        body {
          font-family: Georgia, serif;
          line-height: 1.6;
          color: #333;
          margin: 2em;
        }
        h1 {
          color: #2c3e50;
          border-bottom: 2px solid #3498db;
          padding-bottom: 0.5em;
          margin-bottom: 0.5em;
        }
        .subtitle {
          font-size: 1.1em;
          color: #7f8c8d;
          font-style: italic;
          margin-bottom: 2em;
          line-height: 1.4;
        }
        .meta {
          color: #7f8c8d;
          font-size: 0.9em;
          margin-bottom: 2em;
          padding: 1em;
          background-color: #f8f9fa;
          border-left: 4px solid #3498db;
        }
        .content p {
          margin-bottom: 1em;
          text-align: justify;
        }
        .content img {
          max-width: 100%;
          height: auto;
          display: block;
          margin: 2em auto;
        }
        .source {
          margin-top: 3em;
          padding-top: 2em;
          border-top: 1px solid #ecf0f1;
          font-size: 0.9em;
          color: #7f8c8d;
          text-align: center;
        }
      `,
      content: [
        {
          title: article.title,
          data: createEpubContent({...article, content: processedContent}),
          excludeFromToc: true
        }
      ],
      images: imageAssets,
      tempDir: '/tmp',
      verbose: false
    };

    // Generate EPUB
    const epub = new Epub(options);
    
    await epub.promise;
    
    // Read the generated file
    const epubBuffer = await fs.readFile(outputPath);
    
    // Clean up temp file
    try {
      await fs.unlink(outputPath);
    } catch (e) {
      console.warn('Could not clean up temp EPUB file:', e.message);
    }

    console.log(`Successfully generated EPUB: "${article.title}"`);
    
    return {
      filename,
      buffer: epubBuffer,
      size: epubBuffer.length
    };

  } catch (error) {
    console.error('EPUB generation failed:', error.message);
    throw new Error(`EPUB generation failed: ${error.message}`);
  }
}

function createEpubContent(article) {
  // Fix paragraph structure by ensuring proper HTML formatting
  const formattedContent = formatContentWithParagraphs(article.content);
  
  return `
    <div class="meta">
      <p><strong>Source:</strong> ${escapeHtml(article.siteName)}</p>
      <p><strong>Author:</strong> ${escapeHtml(article.byline)}</p>
      <p><strong>Published:</strong> ${formatDate(article.publishedTime)}</p>
      <p><strong>Reading time:</strong> ~${Math.ceil(article.length / 200)} minutes</p>
    </div>

    <h1>${escapeHtml(article.title)}</h1>
    ${article.excerpt ? `<p class="subtitle">${escapeHtml(article.excerpt)}</p>` : ''}

    <div class="content">
      ${formattedContent}
    </div>

    <div class="source">
      <p><strong>Original URL:</strong><br>
      <a href="${article.url}">${article.url}</a></p>
      <p><em>Generated by Robinsonian Article Monster</em></p>
    </div>
  `;
}

function sanitizeFilename(filename) {
  return filename
    .replace(/[^a-z0-9\s-]/gi, '')
    .replace(/\s+/g, '_')
    .replace(/_+/g, '_')
    .replace(/^_|_$/g, '')
    .substring(0, 100);
}

function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function formatDate(dateString) {
  if (!dateString) return 'Unknown';
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch {
    return 'Unknown';
  }
}

function formatContentWithParagraphs(content) {
  if (!content) return '';
  
  // If content already has proper HTML structure with paragraphs, use it as-is
  if (content.includes('<p>') && content.includes('</p>')) {
    return content;
  }
  
  // If content is plain text or wrapped in a single div, split into paragraphs
  let textContent = content;
  
  // Remove wrapping div if present
  if (textContent.startsWith('<div>') && textContent.endsWith('</div>')) {
    textContent = textContent.slice(5, -6);
  }
  
  // Split by double line breaks and wrap each section in <p> tags
  const paragraphs = textContent
    .split(/\n\s*\n/)
    .filter(p => p.trim().length > 0)
    .map(p => p.trim());
  
  // If we only got one paragraph, try splitting on sentences for very long content
  if (paragraphs.length === 1 && paragraphs[0].length > 1000) {
    const sentences = paragraphs[0].split(/\. (?=[A-Z])/);
    const chunks = [];
    let currentChunk = '';
    
    for (const sentence of sentences) {
      if (currentChunk.length + sentence.length > 800) {
        if (currentChunk) chunks.push(currentChunk.trim() + '.');
        currentChunk = sentence;
      } else {
        currentChunk += (currentChunk ? '. ' : '') + sentence;
      }
    }
    if (currentChunk) chunks.push(currentChunk.trim());
    
    return chunks.map(chunk => `<p>${chunk}</p>`).join('\n');
  }
  
  return paragraphs.map(p => `<p>${p}</p>`).join('\n');
}

async function processImagesForEpub(content) {
  if (!content) return { processedContent: '', imageAssets: [] };
  
  const imageAssets = [];
  let processedContent = content;
  
  // Find all img tags in the content
  const imgRegex = /<img[^>]+src="([^"]+)"[^>]*>/gi;
  const matches = [...content.matchAll(imgRegex)];
  
  console.log(`Found ${matches.length} images to process`);
  
  for (let i = 0; i < matches.length; i++) {
    const [fullMatch, src] = matches[i];
    
    try {
      // Skip data URLs and relative URLs
      if (src.startsWith('data:') || src.startsWith('/') || !src.includes('://')) {
        console.log(`Skipping image: ${src.substring(0, 50)}...`);
        continue;
      }
      
      console.log(`Processing image ${i + 1}: ${src.substring(0, 100)}...`);
      
      // Download the image
      const response = await axios.get(src, {
        responseType: 'arraybuffer',
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; Article Monster/1.0)'
        }
      });
      
      // Determine file extension from content-type or URL
      const contentType = response.headers['content-type'] || '';
      let extension = 'jpg';
      if (contentType.includes('png')) extension = 'png';
      else if (contentType.includes('gif')) extension = 'gif';
      else if (contentType.includes('webp')) extension = 'webp';
      else if (src.includes('.png')) extension = 'png';
      else if (src.includes('.gif')) extension = 'gif';
      else if (src.includes('.webp')) extension = 'webp';
      
      const filename = `image_${i + 1}.${extension}`;
      
      // Add to image assets for EPUB
      imageAssets.push({
        id: `img_${i + 1}`,
        url: filename,
        data: Buffer.from(response.data),
        mediaType: contentType || 'image/jpeg'
      });
      
      // Replace the img tag to reference the local file
      const newImgTag = fullMatch.replace(src, filename);
      processedContent = processedContent.replace(fullMatch, newImgTag);
      
      console.log(`Successfully processed image: ${filename}`);
      
    } catch (error) {
      console.warn(`Failed to process image ${src}: ${error.message}`);
      // Keep the original img tag if download fails
    }
  }
  
  return { processedContent, imageAssets };
}

module.exports = { generateEpub };