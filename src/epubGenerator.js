const Epub = require('epub-gen');
const path = require('path');
const fs = require('fs').promises;

async function generateEpub(article) {
  try {
    console.log(`Generating EPUB for: "${article.title}"`);

    const filename = `${sanitizeFilename(article.title)}.epub`;
    const outputPath = path.join('/tmp', filename);
    
    const options = {
      title: article.title,
      author: article.byline || 'Unknown Author',
      publisher: article.siteName || 'Robinsonian Article Monster',
      output: outputPath,
      cover: null, // We could add cover generation later
      appendChapterTitles: false, // Don't add automatic h1 titles
      css: `
        body {
          font-family: Georgia, serif;
          line-height: 1.6;
          color: #333;
          margin: 2em;
        }
        h1 {
          color: #2c3e50;
          border-bottom: 2px solid #3498db;
          padding-bottom: 0.5em;
          margin-bottom: 1em;
        }
        .meta {
          color: #7f8c8d;
          font-size: 0.9em;
          margin-bottom: 2em;
          padding: 1em;
          background-color: #f8f9fa;
          border-left: 4px solid #3498db;
        }
        .content p {
          margin-bottom: 1em;
          text-align: justify;
        }
        .content img {
          max-width: 100%;
          height: auto;
          display: block;
          margin: 2em auto;
        }
        .source {
          margin-top: 3em;
          padding-top: 2em;
          border-top: 1px solid #ecf0f1;
          font-size: 0.9em;
          color: #7f8c8d;
          text-align: center;
        }
      `,
      content: [
        {
          title: article.title,
          data: createEpubContent(article)
        }
      ],
      tempDir: '/tmp',
      verbose: false
    };

    // Generate EPUB
    const epub = new Epub(options);
    
    await epub.promise;
    
    // Read the generated file
    const epubBuffer = await fs.readFile(outputPath);
    
    // Clean up temp file
    try {
      await fs.unlink(outputPath);
    } catch (e) {
      console.warn('Could not clean up temp EPUB file:', e.message);
    }

    console.log(`Successfully generated EPUB: "${article.title}"`);
    
    return {
      filename,
      buffer: epubBuffer,
      size: epubBuffer.length
    };

  } catch (error) {
    console.error('EPUB generation failed:', error.message);
    throw new Error(`EPUB generation failed: ${error.message}`);
  }
}

function createEpubContent(article) {
  return `
    <h1>${escapeHtml(article.title)}</h1>
    
    <div class="meta">
      <p><strong>Source:</strong> ${escapeHtml(article.siteName)}</p>
      <p><strong>Author:</strong> ${escapeHtml(article.byline)}</p>
      <p><strong>Published:</strong> ${formatDate(article.publishedTime)}</p>
      <p><strong>Reading time:</strong> ~${Math.ceil(article.length / 200)} minutes</p>
    </div>

    <div class="content">
      ${article.content}
    </div>

    <div class="source">
      <p><strong>Original URL:</strong><br>
      <a href="${article.url}">${article.url}</a></p>
      <p><em>Generated by Robinsonian Article Monster</em></p>
    </div>
  `;
}

function sanitizeFilename(filename) {
  // Preserve proper capitalization and use hyphens for readability
  return filename
    .trim()
    .replace(/[^a-zA-Z0-9\s-]/g, '') // Keep letters, numbers, spaces, hyphens
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Collapse multiple hyphens
    .replace(/^-|-$/g, '') // Remove leading/trailing hyphens
    .substring(0, 100); // Limit length for filesystem compatibility
}

function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function formatDate(dateString) {
  if (!dateString) return 'Unknown';
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch {
    return 'Unknown';
  }
}

module.exports = { generateEpub };